plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.netflix.dgs.codegen" version "5.0.6"
    id "com.diffplug.spotless" version "6.2.1"
    id "jacoco"
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

spotless {
    java {
        target project.fileTree(project.rootDir) {
            include '**/*.java'
            exclude 'build/generated/**/*.*', 'build/generated-examples/**/*.*'
        }
        googleJavaFormat()
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter:4.9.21'
    implementation 'org.flywaydb:flyway-core'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2',
                'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation 'joda-time:joda-time:2.10.13'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'io.rest-assured:rest-assured:4.5.1'
    testImplementation 'io.rest-assured:json-path:4.5.1'
    testImplementation 'io.rest-assured:xml-path:4.5.1'
    testImplementation 'io.rest-assured:spring-mock-mvc:4.5.1'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:2.2.2'
}

tasks.named('test') {
	useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test //tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [ //files & directories which don't need to be covered in the report
                    // for example:
//                    "**/dto/*", //for full packages
//                    "**/config/*",
//                    "**/exception/*",
//                    "**/filter/*",
//                    "**/entity/*"
                    //"io/spring/application/data/ArticleData.class" for certain class in a package
            ])
        }))
    }
    reports { //generated files format
        html.enabled(true)
        xml.enabled(true)
        csv.enabled(true)
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification { // custom set of rules
    violationRules {
        rule {
            enabled = false //for now this rule is set to false to dismiss it
            limit {
                minimum = 0.50 // when the rule is enabled to true, the build will fail when less than 50% has passed
//                with the current code: the instructions covered ratio is 33% so when the rule is enabled, the build will fail
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}


tasks.named('clean') {
    doFirst {
        delete './dev.db'
    }
}

tasks.named('generateJava') {
    schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
    packageName = 'io.spring.graphql' // The package name to use to generate sources
}
